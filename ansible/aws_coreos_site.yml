- hosts: localhost
  connection: local

  vars:
    region: eu-west-1
    az: a
    ami: ami-c26bcab1 #eu-west-1 HMV 835.9.0 (stable)
    #ami: ami-c3cae3b4 #eu-west-1 HMV CoreOS 815.0.0 (alpha)
    env: p
    ipcode: P295
    systemCode: "CoreOS-Docker-Image-Registry"
    description: "CoreOS-Docker-Image-Registry"
    teamDL: "george.angel@ft.com"
  vars_files:
    - keys.yaml

  tasks:
    - ec2_vpc:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        state: present
        cidr_block: 172.24.0.0/16
        resource_tags: {"Name": "coreos", "env": "p", "ipcode": "P295", "systemCode": "CoreOS", "description": "CoreOS", "teamDL": "george.angel@ft.com}"}
        subnets:
          - cidr: 172.24.0.0/18
            az:  "{{ region }}a"
            resource_tags: {"Name": "coreos", "env": "p", "ipcode": "P295", "systemCode": "CoreOS", "description": "CoreOS subnet A", "teamDL": "george.angel@ft.com}"}

          - cidr: 172.24.64.0/18
            az:  "{{ region }}b"
            resource_tags: {"Name": "coreos", "env": "p", "ipcode": "P295", "systemCode": "CoreOS", "description": "CoreOS subnet B", "teamDL": "george.angel@ft.com}"}

          - cidr: 172.24.128.0/18
            az:  "{{ region }}c"
            resource_tags: {"Name": "coreos", "env": "p", "ipcode": "P295", "systemCode": "CoreOS", "description": "CoreOS subnet C", "teamDL": "george.angel@ft.com}"}
        internet_gateway: True
        route_tables:
          - subnets:
              - 172.24.0.0/18
              - 172.24.64.0/18
              - 172.24.128.0/18
            routes:
              - dest: 0.0.0.0/0
                gw: igw
      register: vpc
    
    - name: Set up fleet security group
      ec2_group:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        name: "coreos-registry-{{clusterid}}"
        description: Docker image registry security group
        vpc_id: "{{ vpc.vpc_id }}"
        rules:
          # OSB + LDNWebPerf
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 82.136.1.214/32
          # XP - Cluj office
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 194.117.242.0/23
          # aws - jumpbox
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 52.16.117.250/32
          # Garton M - home
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 81.187.140.32/32
          # aws - jumpbox fleet API
          - proto: tcp
            from_port: 49153
            to_port: 49153
            cidr_ip: 52.16.117.250/32
          # Allow 80 from everywhere
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          # Allow 8080 (vulcan for healthcheck) from everywhere
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          # Allow 443 from everywhere
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          # Allow internal requests
          - proto: tcp
            from_port: 0
            to_port: 65535
            cidr_ip: 172.24.0.0/16
        rules_egress:
          - proto: tcp
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0
          # Allow timesync/ntp out
          - proto: udp
            from_port: 123
            to_port: 123
            cidr_ip: 0.0.0.0/0
      register: registry_group

    - name: Tag UP CoreOS security group
      ec2_tag:
        resource: "{{registry_group.group_id}}"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        state: present
        tags:
          Name: "coreos-registry-{{clusterid}}"
          env: "{{env}}"
          ipcode: "{{ipcode}}"
          systemCode: "{{systemCode}}"
          description: "{{description}}"
          teamDL: "{{teamDL}}"

    #- s3:
    #    aws_access_key: "{{ aws_access_key_id }}"
    #    aws_secret_key: "{{ aws_secret_access_key }}"
    #    region: "{{region}}"
    #    bucket: "com.ft.coco-docker-registry"
    #    object: "/coco-reg"
    #    mode: "create"

    - name: Registry ELB
      ec2_elb_lb:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        name: "coreos-registry-{{clusterid}}"
        state: present
        security_group_ids: '{{registry_group.group_id}}'
        subnets:
          - "{{ vpc.subnets[0].id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
          - protocol: http
            load_balancer_port: 8081
            instance_port: 8081
        purge_listeners: True
        health_check:
          ping_protocol: tcp # options are http, https, ssl, tcp
          ping_port: 80
          #ping_path: "/index.html" # not required for tcp or ssl
          response_timeout: 5 # seconds
          interval: 30 # seconds
          unhealthy_threshold: 2
          healthy_threshold: 10
      register: registry_elb

    - name: tag ELB
      shell: ". /.venv/bin/activate && aws --region {{region}} elb add-tags --load-balancer-names coreos-registry-{{clusterid}} --tags Key=Name,Value=coreos-registry-{{clusterid}} Key=env,Value={{env}} Key=ipcode,Value={{ipcode}} Key=systemCode,Value={{systemCode}} Key=description,Value={{description}} Key=teamDL,Value={{teamDL}}"

    - debug: msg="registry_dns {{ registry_elb.elb.dns_name }}"

    - name: Provision m3.medium instances
      ec2:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        group: "coreos-registry-{{clusterid}}"
        image: "{{ami}}"
        instance_type: m3.medium
        wait: true
        exact_count: 1
        user_data: "{{ lookup('template', 'userdata/default_instance_user_data.yaml') }}"
        vpc_subnet_id: "{{ vpc.subnets[0].id }}"
        assign_public_ip: yes
        volumes:
          - device_name: /dev/xvda
            volume_size: 50
        count_tag:
          Name: "ftreg{{clusterid}}-caw1{{az}}-eu-p"
        instance_tags:
          Name: "ftreg{{clusterid}}-caw1{{az}}-eu-p"
          environment: "{{env}}"
          ipCode: "{{ipcode}}"
          systemCode: "{{systemCode}}"
          description: "{{description}}"
          teamDL: "{{teamDL}}"
          stopSchedule: "nostop"

