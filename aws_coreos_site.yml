- hosts: localhost
  connection: local

  vars:
    region: eu-west-1
    az: a
    ami: ami-50f4b927
    env: p
    ipcode: P295
    systemCode: "CoreOS-Docker-Image-Registry"
    description: "CoreOS-Docker-Image-Registry"
    teamDL: "george.angel@ft.com"

  vars_files:
    - keys.yaml

  tasks:
    - debug: msg="{{ token | regex_replace('^https?:\\/\\/[\\w\\.]*\\/([\\w]{8})[\\w]*$', '\\1') }}"
      register:  cp

    - ec2_vpc:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        state: present
        cidr_block: 172.23.0.0/16
        resource_tags: {"Name": "coreos-up", "env": "{{env}}", "ipcode": "{{ipcode}}", "systemCode": "{{systemCode}}", "description": "{{description}}", "teamDL": "{{teamDL}}"}
        subnets:
          - cidr: 172.23.0.0/16
            az:  "{{ region }}{{az}}"
            resource_tags: {"Name": "coreos-up", "env": "{{env}}", "ipcode": "{{ipcode}}", "systemCode": "{{systemCode}}", "description": "{{description}}", "teamDL": "{{teamDL}}"}
        internet_gateway: True
        route_tables:
          - subnets:
              - 172.23.0.0/16
            routes:
              - dest: 0.0.0.0/0
                gw: igw
      register: vpc

    - debug: msg="VPC {{ vpc }}"

    - name: Set up fleet security group
      ec2_group:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        name: "coreos-registry-{{ cp.msg }}"
        description: Docker image registry security group
        vpc_id: "{{ vpc.vpc_id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 0
            to_port: 65535
            cidr_ip: 172.23.0.0/16
        rules_egress:
          - proto: tcp
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0
      register: registry_group

    - name: Tag UP CoreOS security group
      ec2_tag:
        resource: "{{registry_group.group_id}}"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        state: present
        tags:
          Name: "coreos-registry-{{ cp.msg }}"
          env: "{{env}}"
          ipcode: "{{ipcode}}"
          systemCode: "{{systemCode}}"
          description: "{{description}}"
          teamDL: "{{teamDL}}"

    - s3:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        bucket: "coco-docker-registry"
        object: "/registry"
        mode: "create"

    - name: Registry ELB
      ec2_elb_lb:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        name: "coreos-registry-{{cp.msg}}"
        state: present
        security_group_ids: '{{registry_group.group_id}}'
        zones:
          - eu-west-1a
          - eu-west-1b
          - eu-west-1c
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        purge_listeners: True
        health_check:
          ping_protocol: tcp # options are http, https, ssl, tcp
          ping_port: 80
          #ping_path: "/index.html" # not required for tcp or ssl
          response_timeout: 5 # seconds
          interval: 30 # seconds
          unhealthy_threshold: 2
          healthy_threshold: 10
      register: registry_elb

     - name: tag ELB
       shell: ". .venv/bin/activate && aws --region {{region}} elb add-tags --load-balancer-names coreos-registry-{{cp.msg}} --tags Key=Name,Value=coreos-registry-{{cp.msg}} Key=env,Value={{env}} Key=ipcode,Value={{ipcode}} Key=systemCode,Value={{systemCode}} Key=description,Value={{description}} Key=teamDL,Value={{teamDL}}"

    - debug: msg="registry_dns {{ registry_elb.elb.dns_name }}"

    - name: Provision m3.medium instances
      ec2:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "{{region}}"
        zone: "{{region}}{{az}}"
        group: registry_group
        image: "{{ami}}"
        instance_type: m3.medium
        wait: true
        exact_count: 1
        user_data: "{{ lookup('template', 'userdata/default_instance_user_data.yaml') }}"
        volumes:
          - device_name: /dev/xvda
            volume_size: 20
        count_tag:
          Name: "ftreg{{cp.msg}}-caw1{{az}}-eu-p"
        instance_tags:
          Name: "ftreg{{cp.msg}}-caw1{{az}}-eu-p"
          environment: "{{env}}"
          ipCode: "{{ipcode}}"
          systemCode: "{{systemCode}}"
          description: "{{description}}"
          teamDL: "{{teamDL}}"
          stopSchedule: "nostop"
      register: ec2_small

    - debug: msg="ec2_small ips {{ item.public_ip }}"
      with_items: "{{ ec2_small.tagged_instances }}"
